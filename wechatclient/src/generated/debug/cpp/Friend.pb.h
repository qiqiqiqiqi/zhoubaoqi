// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend.proto

#ifndef PROTOBUF_Friend_2eproto__INCLUDED
#define PROTOBUF_Friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Friend_2eproto();
void protobuf_InitDefaults_Friend_2eproto();
void protobuf_AssignDesc_Friend_2eproto();
void protobuf_ShutdownFile_Friend_2eproto();

class FriendItem;

// ===================================================================

class FriendItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.FriendItem) */ {
 public:
  FriendItem();
  virtual ~FriendItem();

  FriendItem(const FriendItem& from);

  inline FriendItem& operator=(const FriendItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendItem& default_instance();

  static const FriendItem* internal_default_instance();

  void Swap(FriendItem* other);

  // implements Message ----------------------------------------------

  inline FriendItem* New() const { return New(NULL); }

  FriendItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendItem& from);
  void MergeFrom(const FriendItem& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FriendItem* other);
  void UnsafeMergeFrom(const FriendItem& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string friendId = 2;
  bool has_friendid() const;
  void clear_friendid();
  static const int kFriendIdFieldNumber = 2;
  const ::std::string& friendid() const;
  void set_friendid(const ::std::string& value);
  void set_friendid(const char* value);
  void set_friendid(const char* value, size_t size);
  ::std::string* mutable_friendid();
  ::std::string* release_friendid();
  void set_allocated_friendid(::std::string* friendid);

  // optional string friendName = 3;
  bool has_friendname() const;
  void clear_friendname();
  static const int kFriendNameFieldNumber = 3;
  const ::std::string& friendname() const;
  void set_friendname(const ::std::string& value);
  void set_friendname(const char* value);
  void set_friendname(const char* value, size_t size);
  ::std::string* mutable_friendname();
  ::std::string* release_friendname();
  void set_allocated_friendname(::std::string* friendname);

  // optional string headPath = 4;
  bool has_headpath() const;
  void clear_headpath();
  static const int kHeadPathFieldNumber = 4;
  const ::std::string& headpath() const;
  void set_headpath(const ::std::string& value);
  void set_headpath(const char* value);
  void set_headpath(const char* value, size_t size);
  ::std::string* mutable_headpath();
  ::std::string* release_headpath();
  void set_allocated_headpath(::std::string* headpath);

  // optional int64 creatTime = 5;
  bool has_creattime() const;
  void clear_creattime();
  static const int kCreatTimeFieldNumber = 5;
  ::google::protobuf::int64 creattime() const;
  void set_creattime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.FriendItem)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_headpath();
  inline void clear_has_headpath();
  inline void set_has_creattime();
  inline void clear_has_creattime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr friendid_;
  ::google::protobuf::internal::ArenaStringPtr friendname_;
  ::google::protobuf::internal::ArenaStringPtr headpath_;
  ::google::protobuf::int64 creattime_;
  friend void  protobuf_InitDefaults_Friend_2eproto_impl();
  friend void  protobuf_AddDesc_Friend_2eproto_impl();
  friend void protobuf_AssignDesc_Friend_2eproto();
  friend void protobuf_ShutdownFile_Friend_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FriendItem> FriendItem_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendItem

// required string userId = 1;
inline bool FriendItem::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendItem::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendItem::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendItem::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& FriendItem::userid() const {
  // @@protoc_insertion_point(field_get:protocol.FriendItem.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendItem::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FriendItem.userId)
}
inline void FriendItem::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FriendItem.userId)
}
inline void FriendItem::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FriendItem.userId)
}
inline ::std::string* FriendItem::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:protocol.FriendItem.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendItem::release_userid() {
  // @@protoc_insertion_point(field_release:protocol.FriendItem.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendItem::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:protocol.FriendItem.userId)
}

// required string friendId = 2;
inline bool FriendItem::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendItem::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendItem::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendItem::clear_friendid() {
  friendid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friendid();
}
inline const ::std::string& FriendItem::friendid() const {
  // @@protoc_insertion_point(field_get:protocol.FriendItem.friendId)
  return friendid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendItem::set_friendid(const ::std::string& value) {
  set_has_friendid();
  friendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FriendItem.friendId)
}
inline void FriendItem::set_friendid(const char* value) {
  set_has_friendid();
  friendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FriendItem.friendId)
}
inline void FriendItem::set_friendid(const char* value, size_t size) {
  set_has_friendid();
  friendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FriendItem.friendId)
}
inline ::std::string* FriendItem::mutable_friendid() {
  set_has_friendid();
  // @@protoc_insertion_point(field_mutable:protocol.FriendItem.friendId)
  return friendid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendItem::release_friendid() {
  // @@protoc_insertion_point(field_release:protocol.FriendItem.friendId)
  clear_has_friendid();
  return friendid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendItem::set_allocated_friendid(::std::string* friendid) {
  if (friendid != NULL) {
    set_has_friendid();
  } else {
    clear_has_friendid();
  }
  friendid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendid);
  // @@protoc_insertion_point(field_set_allocated:protocol.FriendItem.friendId)
}

// optional string friendName = 3;
inline bool FriendItem::has_friendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendItem::set_has_friendname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendItem::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendItem::clear_friendname() {
  friendname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friendname();
}
inline const ::std::string& FriendItem::friendname() const {
  // @@protoc_insertion_point(field_get:protocol.FriendItem.friendName)
  return friendname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendItem::set_friendname(const ::std::string& value) {
  set_has_friendname();
  friendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FriendItem.friendName)
}
inline void FriendItem::set_friendname(const char* value) {
  set_has_friendname();
  friendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FriendItem.friendName)
}
inline void FriendItem::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  friendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FriendItem.friendName)
}
inline ::std::string* FriendItem::mutable_friendname() {
  set_has_friendname();
  // @@protoc_insertion_point(field_mutable:protocol.FriendItem.friendName)
  return friendname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendItem::release_friendname() {
  // @@protoc_insertion_point(field_release:protocol.FriendItem.friendName)
  clear_has_friendname();
  return friendname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendItem::set_allocated_friendname(::std::string* friendname) {
  if (friendname != NULL) {
    set_has_friendname();
  } else {
    clear_has_friendname();
  }
  friendname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendname);
  // @@protoc_insertion_point(field_set_allocated:protocol.FriendItem.friendName)
}

// optional string headPath = 4;
inline bool FriendItem::has_headpath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendItem::set_has_headpath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendItem::clear_has_headpath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendItem::clear_headpath() {
  headpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headpath();
}
inline const ::std::string& FriendItem::headpath() const {
  // @@protoc_insertion_point(field_get:protocol.FriendItem.headPath)
  return headpath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendItem::set_headpath(const ::std::string& value) {
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FriendItem.headPath)
}
inline void FriendItem::set_headpath(const char* value) {
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FriendItem.headPath)
}
inline void FriendItem::set_headpath(const char* value, size_t size) {
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FriendItem.headPath)
}
inline ::std::string* FriendItem::mutable_headpath() {
  set_has_headpath();
  // @@protoc_insertion_point(field_mutable:protocol.FriendItem.headPath)
  return headpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendItem::release_headpath() {
  // @@protoc_insertion_point(field_release:protocol.FriendItem.headPath)
  clear_has_headpath();
  return headpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendItem::set_allocated_headpath(::std::string* headpath) {
  if (headpath != NULL) {
    set_has_headpath();
  } else {
    clear_has_headpath();
  }
  headpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headpath);
  // @@protoc_insertion_point(field_set_allocated:protocol.FriendItem.headPath)
}

// optional int64 creatTime = 5;
inline bool FriendItem::has_creattime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendItem::set_has_creattime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendItem::clear_has_creattime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendItem::clear_creattime() {
  creattime_ = GOOGLE_LONGLONG(0);
  clear_has_creattime();
}
inline ::google::protobuf::int64 FriendItem::creattime() const {
  // @@protoc_insertion_point(field_get:protocol.FriendItem.creatTime)
  return creattime_;
}
inline void FriendItem::set_creattime(::google::protobuf::int64 value) {
  set_has_creattime();
  creattime_ = value;
  // @@protoc_insertion_point(field_set:protocol.FriendItem.creatTime)
}

inline const FriendItem* FriendItem::internal_default_instance() {
  return &FriendItem_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Friend_2eproto__INCLUDED
