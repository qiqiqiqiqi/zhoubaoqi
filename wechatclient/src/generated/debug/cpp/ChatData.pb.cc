// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ChatItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatItem_ChatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatItem_TargetType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChatData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ChatData_2eproto() {
  protobuf_AddDesc_ChatData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChatData.proto");
  GOOGLE_CHECK(file != NULL);
  ChatItem_descriptor_ = file->message_type(0);
  static const int ChatItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, targettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, senduserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, receiveuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, chatbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, messageinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, date_),
  };
  ChatItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatItem_descriptor_,
      ChatItem::internal_default_instance(),
      ChatItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, _has_bits_),
      -1,
      -1,
      sizeof(ChatItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, _internal_metadata_));
  ChatItem_ChatType_descriptor_ = ChatItem_descriptor_->enum_type(0);
  ChatItem_TargetType_descriptor_ = ChatItem_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChatData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatItem_descriptor_, ChatItem::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChatData_2eproto() {
  ChatItem_default_instance_.Shutdown();
  delete ChatItem_reflection_;
}

void protobuf_InitDefaults_ChatData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ChatItem_default_instance_.DefaultConstruct();
  ChatItem_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ChatData_2eproto_once_);
void protobuf_InitDefaults_ChatData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ChatData_2eproto_once_,
                 &protobuf_InitDefaults_ChatData_2eproto_impl);
}
void protobuf_AddDesc_ChatData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ChatData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ChatData.proto\022\010protocol\"\260\002\n\010ChatItem\022"
    "=\n\ntargetType\030\001 \001(\0162\035.protocol.ChatItem."
    "TargetType:\nINDIVIDUAL\022\022\n\nsendUserId\030\002 \001"
    "(\t\022\025\n\rreceiveUserId\030\003 \002(\t\022-\n\010chatType\030\004 "
    "\002(\0162\033.protocol.ChatItem.ChatType\022\020\n\010chat"
    "Body\030\005 \002(\t\022\025\n\rmessageInfoID\030\007 \002(\t\022\014\n\004dat"
    "e\030\006 \001(\003\"\037\n\010ChatType\022\010\n\004TEXT\020\000\022\t\n\005IMAGE\020\001"
    "\"3\n\nTargetType\022\016\n\nINDIVIDUAL\020\000\022\t\n\005GROUP\020"
    "\001\022\n\n\006SYSTEM\020\002", 333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ChatData_2eproto_once_);
void protobuf_AddDesc_ChatData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ChatData_2eproto_once_,
                 &protobuf_AddDesc_ChatData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatData_2eproto {
  StaticDescriptorInitializer_ChatData_2eproto() {
    protobuf_AddDesc_ChatData_2eproto();
  }
} static_descriptor_initializer_ChatData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatItem_ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatItem_ChatType_descriptor_;
}
bool ChatItem_ChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatItem_ChatType ChatItem::TEXT;
const ChatItem_ChatType ChatItem::IMAGE;
const ChatItem_ChatType ChatItem::ChatType_MIN;
const ChatItem_ChatType ChatItem::ChatType_MAX;
const int ChatItem::ChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChatItem_TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatItem_TargetType_descriptor_;
}
bool ChatItem_TargetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatItem_TargetType ChatItem::INDIVIDUAL;
const ChatItem_TargetType ChatItem::GROUP;
const ChatItem_TargetType ChatItem::SYSTEM;
const ChatItem_TargetType ChatItem::TargetType_MIN;
const ChatItem_TargetType ChatItem::TargetType_MAX;
const int ChatItem::TargetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatItem::kTargetTypeFieldNumber;
const int ChatItem::kSendUserIdFieldNumber;
const int ChatItem::kReceiveUserIdFieldNumber;
const int ChatItem::kChatTypeFieldNumber;
const int ChatItem::kChatBodyFieldNumber;
const int ChatItem::kMessageInfoIDFieldNumber;
const int ChatItem::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatItem::ChatItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ChatData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChatItem)
}

void ChatItem::InitAsDefaultInstance() {
}

ChatItem::ChatItem(const ChatItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ChatItem)
}

void ChatItem::SharedCtor() {
  _cached_size_ = 0;
  senduserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiveuserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageinfoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&targettype_, 0, reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&targettype_) + sizeof(date_));
}

ChatItem::~ChatItem() {
  // @@protoc_insertion_point(destructor:protocol.ChatItem)
  SharedDtor();
}

void ChatItem::SharedDtor() {
  senduserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiveuserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatbody_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageinfoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatItem_descriptor_;
}

const ChatItem& ChatItem::default_instance() {
  protobuf_InitDefaults_ChatData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChatItem> ChatItem_default_instance_;

ChatItem* ChatItem::New(::google::protobuf::Arena* arena) const {
  ChatItem* n = new ChatItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatItem::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChatItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChatItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChatItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(targettype_, date_);
    if (has_senduserid()) {
      senduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_receiveuserid()) {
      receiveuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chatbody()) {
      chatbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_messageinfoid()) {
      messageinfoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChatItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.ChatItem.TargetType targetType = 1 [default = INDIVIDUAL];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::ChatItem_TargetType_IsValid(value)) {
            set_targettype(static_cast< ::protocol::ChatItem_TargetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sendUserId;
        break;
      }

      // optional string sendUserId = 2;
      case 2: {
        if (tag == 18) {
         parse_sendUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senduserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->senduserid().data(), this->senduserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChatItem.sendUserId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_receiveUserId;
        break;
      }

      // required string receiveUserId = 3;
      case 3: {
        if (tag == 26) {
         parse_receiveUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiveuserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiveuserid().data(), this->receiveuserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChatItem.receiveUserId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // required .protocol.ChatItem.ChatType chatType = 4;
      case 4: {
        if (tag == 32) {
         parse_chatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::ChatItem_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::protocol::ChatItem_ChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chatBody;
        break;
      }

      // required string chatBody = 5;
      case 5: {
        if (tag == 42) {
         parse_chatBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatbody()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatbody().data(), this->chatbody().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChatItem.chatBody");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_date;
        break;
      }

      // optional int64 date = 6;
      case 6: {
        if (tag == 48) {
         parse_date:
          set_has_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_messageInfoID;
        break;
      }

      // required string messageInfoID = 7;
      case 7: {
        if (tag == 58) {
         parse_messageInfoID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageinfoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageinfoid().data(), this->messageinfoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChatItem.messageInfoID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChatItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChatItem)
  return false;
#undef DO_
}

void ChatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChatItem)
  // optional .protocol.ChatItem.TargetType targetType = 1 [default = INDIVIDUAL];
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->targettype(), output);
  }

  // optional string sendUserId = 2;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senduserid().data(), this->senduserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChatItem.sendUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->senduserid(), output);
  }

  // required string receiveUserId = 3;
  if (has_receiveuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiveuserid().data(), this->receiveuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChatItem.receiveUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->receiveuserid(), output);
  }

  // required .protocol.ChatItem.ChatType chatType = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chattype(), output);
  }

  // required string chatBody = 5;
  if (has_chatbody()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatbody().data(), this->chatbody().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChatItem.chatBody");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->chatbody(), output);
  }

  // optional int64 date = 6;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->date(), output);
  }

  // required string messageInfoID = 7;
  if (has_messageinfoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageinfoid().data(), this->messageinfoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChatItem.messageInfoID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->messageinfoid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChatItem)
}

::google::protobuf::uint8* ChatItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChatItem)
  // optional .protocol.ChatItem.TargetType targetType = 1 [default = INDIVIDUAL];
  if (has_targettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->targettype(), target);
  }

  // optional string sendUserId = 2;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senduserid().data(), this->senduserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChatItem.sendUserId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->senduserid(), target);
  }

  // required string receiveUserId = 3;
  if (has_receiveuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiveuserid().data(), this->receiveuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChatItem.receiveUserId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->receiveuserid(), target);
  }

  // required .protocol.ChatItem.ChatType chatType = 4;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->chattype(), target);
  }

  // required string chatBody = 5;
  if (has_chatbody()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatbody().data(), this->chatbody().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChatItem.chatBody");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->chatbody(), target);
  }

  // optional int64 date = 6;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->date(), target);
  }

  // required string messageInfoID = 7;
  if (has_messageinfoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageinfoid().data(), this->messageinfoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChatItem.messageInfoID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->messageinfoid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChatItem)
  return target;
}

size_t ChatItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.ChatItem)
  size_t total_size = 0;

  if (has_receiveuserid()) {
    // required string receiveUserId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiveuserid());
  }

  if (has_chattype()) {
    // required .protocol.ChatItem.ChatType chatType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  if (has_chatbody()) {
    // required string chatBody = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatbody());
  }

  if (has_messageinfoid()) {
    // required string messageInfoID = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messageinfoid());
  }

  return total_size;
}
size_t ChatItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChatItem)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required string receiveUserId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiveuserid());

    // required .protocol.ChatItem.ChatType chatType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

    // required string chatBody = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatbody());

    // required string messageInfoID = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messageinfoid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 67u) {
    // optional .protocol.ChatItem.TargetType targetType = 1 [default = INDIVIDUAL];
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->targettype());
    }

    // optional string sendUserId = 2;
    if (has_senduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senduserid());
    }

    // optional int64 date = 6;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChatItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChatItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChatItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChatItem)
    UnsafeMergeFrom(*source);
  }
}

void ChatItem::MergeFrom(const ChatItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChatItem)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChatItem::UnsafeMergeFrom(const ChatItem& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_senduserid()) {
      set_has_senduserid();
      senduserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senduserid_);
    }
    if (from.has_receiveuserid()) {
      set_has_receiveuserid();
      receiveuserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiveuserid_);
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_chatbody()) {
      set_has_chatbody();
      chatbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatbody_);
    }
    if (from.has_messageinfoid()) {
      set_has_messageinfoid();
      messageinfoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messageinfoid_);
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ChatItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChatItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatItem::CopyFrom(const ChatItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChatItem)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChatItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;

  return true;
}

void ChatItem::Swap(ChatItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatItem::InternalSwap(ChatItem* other) {
  std::swap(targettype_, other->targettype_);
  senduserid_.Swap(&other->senduserid_);
  receiveuserid_.Swap(&other->receiveuserid_);
  std::swap(chattype_, other->chattype_);
  chatbody_.Swap(&other->chatbody_);
  messageinfoid_.Swap(&other->messageinfoid_);
  std::swap(date_, other->date_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatItem_descriptor_;
  metadata.reflection = ChatItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatItem

// optional .protocol.ChatItem.TargetType targetType = 1 [default = INDIVIDUAL];
bool ChatItem::has_targettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatItem::set_has_targettype() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatItem::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatItem::clear_targettype() {
  targettype_ = 0;
  clear_has_targettype();
}
::protocol::ChatItem_TargetType ChatItem::targettype() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.targetType)
  return static_cast< ::protocol::ChatItem_TargetType >(targettype_);
}
void ChatItem::set_targettype(::protocol::ChatItem_TargetType value) {
  assert(::protocol::ChatItem_TargetType_IsValid(value));
  set_has_targettype();
  targettype_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChatItem.targetType)
}

// optional string sendUserId = 2;
bool ChatItem::has_senduserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatItem::set_has_senduserid() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatItem::clear_has_senduserid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatItem::clear_senduserid() {
  senduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senduserid();
}
const ::std::string& ChatItem::senduserid() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.sendUserId)
  return senduserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatItem::set_senduserid(const ::std::string& value) {
  set_has_senduserid();
  senduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChatItem.sendUserId)
}
void ChatItem::set_senduserid(const char* value) {
  set_has_senduserid();
  senduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChatItem.sendUserId)
}
void ChatItem::set_senduserid(const char* value, size_t size) {
  set_has_senduserid();
  senduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChatItem.sendUserId)
}
::std::string* ChatItem::mutable_senduserid() {
  set_has_senduserid();
  // @@protoc_insertion_point(field_mutable:protocol.ChatItem.sendUserId)
  return senduserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatItem::release_senduserid() {
  // @@protoc_insertion_point(field_release:protocol.ChatItem.sendUserId)
  clear_has_senduserid();
  return senduserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatItem::set_allocated_senduserid(::std::string* senduserid) {
  if (senduserid != NULL) {
    set_has_senduserid();
  } else {
    clear_has_senduserid();
  }
  senduserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senduserid);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatItem.sendUserId)
}

// required string receiveUserId = 3;
bool ChatItem::has_receiveuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatItem::set_has_receiveuserid() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatItem::clear_has_receiveuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatItem::clear_receiveuserid() {
  receiveuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receiveuserid();
}
const ::std::string& ChatItem::receiveuserid() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.receiveUserId)
  return receiveuserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatItem::set_receiveuserid(const ::std::string& value) {
  set_has_receiveuserid();
  receiveuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChatItem.receiveUserId)
}
void ChatItem::set_receiveuserid(const char* value) {
  set_has_receiveuserid();
  receiveuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChatItem.receiveUserId)
}
void ChatItem::set_receiveuserid(const char* value, size_t size) {
  set_has_receiveuserid();
  receiveuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChatItem.receiveUserId)
}
::std::string* ChatItem::mutable_receiveuserid() {
  set_has_receiveuserid();
  // @@protoc_insertion_point(field_mutable:protocol.ChatItem.receiveUserId)
  return receiveuserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatItem::release_receiveuserid() {
  // @@protoc_insertion_point(field_release:protocol.ChatItem.receiveUserId)
  clear_has_receiveuserid();
  return receiveuserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatItem::set_allocated_receiveuserid(::std::string* receiveuserid) {
  if (receiveuserid != NULL) {
    set_has_receiveuserid();
  } else {
    clear_has_receiveuserid();
  }
  receiveuserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiveuserid);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatItem.receiveUserId)
}

// required .protocol.ChatItem.ChatType chatType = 4;
bool ChatItem::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatItem::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatItem::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatItem::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
::protocol::ChatItem_ChatType ChatItem::chattype() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.chatType)
  return static_cast< ::protocol::ChatItem_ChatType >(chattype_);
}
void ChatItem::set_chattype(::protocol::ChatItem_ChatType value) {
  assert(::protocol::ChatItem_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChatItem.chatType)
}

// required string chatBody = 5;
bool ChatItem::has_chatbody() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatItem::set_has_chatbody() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatItem::clear_has_chatbody() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatItem::clear_chatbody() {
  chatbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatbody();
}
const ::std::string& ChatItem::chatbody() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.chatBody)
  return chatbody_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatItem::set_chatbody(const ::std::string& value) {
  set_has_chatbody();
  chatbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChatItem.chatBody)
}
void ChatItem::set_chatbody(const char* value) {
  set_has_chatbody();
  chatbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChatItem.chatBody)
}
void ChatItem::set_chatbody(const char* value, size_t size) {
  set_has_chatbody();
  chatbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChatItem.chatBody)
}
::std::string* ChatItem::mutable_chatbody() {
  set_has_chatbody();
  // @@protoc_insertion_point(field_mutable:protocol.ChatItem.chatBody)
  return chatbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatItem::release_chatbody() {
  // @@protoc_insertion_point(field_release:protocol.ChatItem.chatBody)
  clear_has_chatbody();
  return chatbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatItem::set_allocated_chatbody(::std::string* chatbody) {
  if (chatbody != NULL) {
    set_has_chatbody();
  } else {
    clear_has_chatbody();
  }
  chatbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatbody);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatItem.chatBody)
}

// required string messageInfoID = 7;
bool ChatItem::has_messageinfoid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatItem::set_has_messageinfoid() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatItem::clear_has_messageinfoid() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatItem::clear_messageinfoid() {
  messageinfoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messageinfoid();
}
const ::std::string& ChatItem::messageinfoid() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.messageInfoID)
  return messageinfoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatItem::set_messageinfoid(const ::std::string& value) {
  set_has_messageinfoid();
  messageinfoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChatItem.messageInfoID)
}
void ChatItem::set_messageinfoid(const char* value) {
  set_has_messageinfoid();
  messageinfoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChatItem.messageInfoID)
}
void ChatItem::set_messageinfoid(const char* value, size_t size) {
  set_has_messageinfoid();
  messageinfoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChatItem.messageInfoID)
}
::std::string* ChatItem::mutable_messageinfoid() {
  set_has_messageinfoid();
  // @@protoc_insertion_point(field_mutable:protocol.ChatItem.messageInfoID)
  return messageinfoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatItem::release_messageinfoid() {
  // @@protoc_insertion_point(field_release:protocol.ChatItem.messageInfoID)
  clear_has_messageinfoid();
  return messageinfoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatItem::set_allocated_messageinfoid(::std::string* messageinfoid) {
  if (messageinfoid != NULL) {
    set_has_messageinfoid();
  } else {
    clear_has_messageinfoid();
  }
  messageinfoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageinfoid);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatItem.messageInfoID)
}

// optional int64 date = 6;
bool ChatItem::has_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChatItem::set_has_date() {
  _has_bits_[0] |= 0x00000040u;
}
void ChatItem::clear_has_date() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChatItem::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
::google::protobuf::int64 ChatItem::date() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.date)
  return date_;
}
void ChatItem::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChatItem.date)
}

inline const ChatItem* ChatItem::internal_default_instance() {
  return &ChatItem_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
