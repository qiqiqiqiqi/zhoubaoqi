// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Register.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Register.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* RegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Register_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Register_2eproto() {
  protobuf_AddDesc_Register_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Register.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterReq_descriptor_ = file->message_type(0);
  static const int RegisterReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReq, userpassword_),
  };
  RegisterReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterReq_descriptor_,
      RegisterReq::internal_default_instance(),
      RegisterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReq, _has_bits_),
      -1,
      -1,
      sizeof(RegisterReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReq, _internal_metadata_));
  RegisterRsp_descriptor_ = file->message_type(1);
  static const int RegisterRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsp, useritem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsp, resultcode_),
  };
  RegisterRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterRsp_descriptor_,
      RegisterRsp::internal_default_instance(),
      RegisterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsp, _has_bits_),
      -1,
      -1,
      sizeof(RegisterRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsp, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Register_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterReq_descriptor_, RegisterReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterRsp_descriptor_, RegisterRsp::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Register_2eproto() {
  RegisterReq_default_instance_.Shutdown();
  delete RegisterReq_reflection_;
  RegisterRsp_default_instance_.Shutdown();
  delete RegisterRsp_reflection_;
}

void protobuf_InitDefaults_Register_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_InitDefaults_Result_2eproto();
  ::protocol::protobuf_InitDefaults_UserData_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  RegisterReq_default_instance_.DefaultConstruct();
  RegisterRsp_default_instance_.DefaultConstruct();
  RegisterReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegisterRsp_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Register_2eproto_once_);
void protobuf_InitDefaults_Register_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Register_2eproto_once_,
                 &protobuf_InitDefaults_Register_2eproto_impl);
}
void protobuf_AddDesc_Register_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Register_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Register.proto\022\010protocol\032\014Result.proto"
    "\032\016UserData.proto\"5\n\013RegisterReq\022\020\n\010userN"
    "ame\030\001 \002(\t\022\024\n\014userPassword\030\002 \002(\t\"]\n\013Regis"
    "terRsp\022$\n\010userItem\030\002 \001(\0132\022.protocol.User"
    "Item\022(\n\nresultCode\030\001 \002(\0162\024.protocol.Resu"
    "ltCode", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Register.proto", &protobuf_RegisterTypes);
  ::protocol::protobuf_AddDesc_Result_2eproto();
  ::protocol::protobuf_AddDesc_UserData_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Register_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Register_2eproto_once_);
void protobuf_AddDesc_Register_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Register_2eproto_once_,
                 &protobuf_AddDesc_Register_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Register_2eproto {
  StaticDescriptorInitializer_Register_2eproto() {
    protobuf_AddDesc_Register_2eproto();
  }
} static_descriptor_initializer_Register_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterReq::kUserNameFieldNumber;
const int RegisterReq::kUserPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterReq::RegisterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Register_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.RegisterReq)
}

void RegisterReq::InitAsDefaultInstance() {
}

RegisterReq::RegisterReq(const RegisterReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.RegisterReq)
}

void RegisterReq::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterReq::~RegisterReq() {
  // @@protoc_insertion_point(destructor:protocol.RegisterReq)
  SharedDtor();
}

void RegisterReq::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterReq_descriptor_;
}

const RegisterReq& RegisterReq::default_instance() {
  protobuf_InitDefaults_Register_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegisterReq> RegisterReq_default_instance_;

RegisterReq* RegisterReq::New(::google::protobuf::Arena* arena) const {
  RegisterReq* n = new RegisterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.RegisterReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userpassword()) {
      userpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.RegisterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.RegisterReq.userName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userPassword;
        break;
      }

      // required string userPassword = 2;
      case 2: {
        if (tag == 18) {
         parse_userPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpassword().data(), this->userpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.RegisterReq.userPassword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.RegisterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.RegisterReq)
  return false;
#undef DO_
}

void RegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.RegisterReq)
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.RegisterReq.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string userPassword = 2;
  if (has_userpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), this->userpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.RegisterReq.userPassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userpassword(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.RegisterReq)
}

::google::protobuf::uint8* RegisterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.RegisterReq)
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.RegisterReq.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string userPassword = 2;
  if (has_userpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), this->userpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.RegisterReq.userPassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpassword(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.RegisterReq)
  return target;
}

size_t RegisterReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.RegisterReq)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_userpassword()) {
    // required string userPassword = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());
  }

  return total_size;
}
size_t RegisterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.RegisterReq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string userPassword = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.RegisterReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.RegisterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.RegisterReq)
    UnsafeMergeFrom(*source);
  }
}

void RegisterReq::MergeFrom(const RegisterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.RegisterReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegisterReq::UnsafeMergeFrom(const RegisterReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_userpassword()) {
      set_has_userpassword();
      userpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.RegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterReq::CopyFrom(const RegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.RegisterReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegisterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegisterReq::Swap(RegisterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterReq::InternalSwap(RegisterReq* other) {
  username_.Swap(&other->username_);
  userpassword_.Swap(&other->userpassword_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterReq_descriptor_;
  metadata.reflection = RegisterReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterReq

// required string userName = 1;
bool RegisterReq::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegisterReq::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void RegisterReq::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegisterReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& RegisterReq::username() const {
  // @@protoc_insertion_point(field_get:protocol.RegisterReq.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterReq::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.RegisterReq.userName)
}
void RegisterReq::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.RegisterReq.userName)
}
void RegisterReq::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.RegisterReq.userName)
}
::std::string* RegisterReq::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:protocol.RegisterReq.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegisterReq::release_username() {
  // @@protoc_insertion_point(field_release:protocol.RegisterReq.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:protocol.RegisterReq.userName)
}

// required string userPassword = 2;
bool RegisterReq::has_userpassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegisterReq::set_has_userpassword() {
  _has_bits_[0] |= 0x00000002u;
}
void RegisterReq::clear_has_userpassword() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegisterReq::clear_userpassword() {
  userpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpassword();
}
const ::std::string& RegisterReq::userpassword() const {
  // @@protoc_insertion_point(field_get:protocol.RegisterReq.userPassword)
  return userpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterReq::set_userpassword(const ::std::string& value) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.RegisterReq.userPassword)
}
void RegisterReq::set_userpassword(const char* value) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.RegisterReq.userPassword)
}
void RegisterReq::set_userpassword(const char* value, size_t size) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.RegisterReq.userPassword)
}
::std::string* RegisterReq::mutable_userpassword() {
  set_has_userpassword();
  // @@protoc_insertion_point(field_mutable:protocol.RegisterReq.userPassword)
  return userpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegisterReq::release_userpassword() {
  // @@protoc_insertion_point(field_release:protocol.RegisterReq.userPassword)
  clear_has_userpassword();
  return userpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterReq::set_allocated_userpassword(::std::string* userpassword) {
  if (userpassword != NULL) {
    set_has_userpassword();
  } else {
    clear_has_userpassword();
  }
  userpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpassword);
  // @@protoc_insertion_point(field_set_allocated:protocol.RegisterReq.userPassword)
}

inline const RegisterReq* RegisterReq::internal_default_instance() {
  return &RegisterReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRsp::kUserItemFieldNumber;
const int RegisterRsp::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRsp::RegisterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Register_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.RegisterRsp)
}

void RegisterRsp::InitAsDefaultInstance() {
  useritem_ = const_cast< ::protocol::UserItem*>(
      ::protocol::UserItem::internal_default_instance());
}

RegisterRsp::RegisterRsp(const RegisterRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.RegisterRsp)
}

void RegisterRsp::SharedCtor() {
  _cached_size_ = 0;
  useritem_ = NULL;
  resultcode_ = 0;
}

RegisterRsp::~RegisterRsp() {
  // @@protoc_insertion_point(destructor:protocol.RegisterRsp)
  SharedDtor();
}

void RegisterRsp::SharedDtor() {
  if (this != &RegisterRsp_default_instance_.get()) {
    delete useritem_;
  }
}

void RegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRsp_descriptor_;
}

const RegisterRsp& RegisterRsp::default_instance() {
  protobuf_InitDefaults_Register_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegisterRsp> RegisterRsp_default_instance_;

RegisterRsp* RegisterRsp::New(::google::protobuf::Arena* arena) const {
  RegisterRsp* n = new RegisterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.RegisterRsp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_useritem()) {
      if (useritem_ != NULL) useritem_->::protocol::UserItem::Clear();
    }
    resultcode_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.RegisterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.ResultCode resultCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::ResultCode_IsValid(value)) {
            set_resultcode(static_cast< ::protocol::ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userItem;
        break;
      }

      // optional .protocol.UserItem userItem = 2;
      case 2: {
        if (tag == 18) {
         parse_userItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_useritem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.RegisterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.RegisterRsp)
  return false;
#undef DO_
}

void RegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.RegisterRsp)
  // required .protocol.ResultCode resultCode = 1;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resultcode(), output);
  }

  // optional .protocol.UserItem userItem = 2;
  if (has_useritem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->useritem_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.RegisterRsp)
}

::google::protobuf::uint8* RegisterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.RegisterRsp)
  // required .protocol.ResultCode resultCode = 1;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resultcode(), target);
  }

  // optional .protocol.UserItem userItem = 2;
  if (has_useritem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->useritem_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.RegisterRsp)
  return target;
}

size_t RegisterRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.RegisterRsp)
  size_t total_size = 0;

  // required .protocol.ResultCode resultCode = 1;
  if (has_resultcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resultcode());
  }
  // optional .protocol.UserItem userItem = 2;
  if (has_useritem()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->useritem_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.RegisterRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.RegisterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.RegisterRsp)
    UnsafeMergeFrom(*source);
  }
}

void RegisterRsp::MergeFrom(const RegisterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.RegisterRsp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegisterRsp::UnsafeMergeFrom(const RegisterRsp& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useritem()) {
      mutable_useritem()->::protocol::UserItem::MergeFrom(from.useritem());
    }
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RegisterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.RegisterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRsp::CopyFrom(const RegisterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.RegisterRsp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegisterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_useritem()) {
    if (!this->useritem_->IsInitialized()) return false;
  }
  return true;
}

void RegisterRsp::Swap(RegisterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRsp::InternalSwap(RegisterRsp* other) {
  std::swap(useritem_, other->useritem_);
  std::swap(resultcode_, other->resultcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRsp_descriptor_;
  metadata.reflection = RegisterRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRsp

// optional .protocol.UserItem userItem = 2;
bool RegisterRsp::has_useritem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegisterRsp::set_has_useritem() {
  _has_bits_[0] |= 0x00000001u;
}
void RegisterRsp::clear_has_useritem() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegisterRsp::clear_useritem() {
  if (useritem_ != NULL) useritem_->::protocol::UserItem::Clear();
  clear_has_useritem();
}
const ::protocol::UserItem& RegisterRsp::useritem() const {
  // @@protoc_insertion_point(field_get:protocol.RegisterRsp.userItem)
  return useritem_ != NULL ? *useritem_
                         : *::protocol::UserItem::internal_default_instance();
}
::protocol::UserItem* RegisterRsp::mutable_useritem() {
  set_has_useritem();
  if (useritem_ == NULL) {
    useritem_ = new ::protocol::UserItem;
  }
  // @@protoc_insertion_point(field_mutable:protocol.RegisterRsp.userItem)
  return useritem_;
}
::protocol::UserItem* RegisterRsp::release_useritem() {
  // @@protoc_insertion_point(field_release:protocol.RegisterRsp.userItem)
  clear_has_useritem();
  ::protocol::UserItem* temp = useritem_;
  useritem_ = NULL;
  return temp;
}
void RegisterRsp::set_allocated_useritem(::protocol::UserItem* useritem) {
  delete useritem_;
  useritem_ = useritem;
  if (useritem) {
    set_has_useritem();
  } else {
    clear_has_useritem();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.RegisterRsp.userItem)
}

// required .protocol.ResultCode resultCode = 1;
bool RegisterRsp::has_resultcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegisterRsp::set_has_resultcode() {
  _has_bits_[0] |= 0x00000002u;
}
void RegisterRsp::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegisterRsp::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
::protocol::ResultCode RegisterRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:protocol.RegisterRsp.resultCode)
  return static_cast< ::protocol::ResultCode >(resultcode_);
}
void RegisterRsp::set_resultcode(::protocol::ResultCode value) {
  assert(::protocol::ResultCode_IsValid(value));
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:protocol.RegisterRsp.resultCode)
}

inline const RegisterRsp* RegisterRsp::internal_default_instance() {
  return &RegisterRsp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
