// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

#ifndef PROTOBUF_Account_2eproto__INCLUDED
#define PROTOBUF_Account_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Account_2eproto();
void protobuf_InitDefaults_Account_2eproto();
void protobuf_AssignDesc_Account_2eproto();
void protobuf_ShutdownFile_Account_2eproto();

class Account;

// ===================================================================

class Account : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Account& default_instance();

  static const Account* internal_default_instance();

  void Swap(Account* other);

  // implements Message ----------------------------------------------

  inline Account* New() const { return New(NULL); }

  Account* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Account* other);
  void UnsafeMergeFrom(const Account& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userId = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string userName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional int32 headIndex = 3;
  bool has_headindex() const;
  void clear_headindex();
  static const int kHeadIndexFieldNumber = 3;
  ::google::protobuf::int32 headindex() const;
  void set_headindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.Account)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_headindex();
  inline void clear_has_headindex();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 headindex_;
  friend void  protobuf_InitDefaults_Account_2eproto_impl();
  friend void  protobuf_AddDesc_Account_2eproto_impl();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Account> Account_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Account

// required string userId = 1;
inline bool Account::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& Account::userid() const {
  // @@protoc_insertion_point(field_get:protocol.Account.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.userId)
}
inline void Account::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.userId)
}
inline void Account::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.userId)
}
inline ::std::string* Account::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:protocol.Account.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_userid() {
  // @@protoc_insertion_point(field_release:protocol.Account.userId)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.userId)
}

// required string userName = 2;
inline bool Account::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Account::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Account::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Account::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Account::username() const {
  // @@protoc_insertion_point(field_get:protocol.Account.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.userName)
}
inline void Account::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.userName)
}
inline void Account::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.userName)
}
inline ::std::string* Account::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:protocol.Account.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_username() {
  // @@protoc_insertion_point(field_release:protocol.Account.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.userName)
}

// optional int32 headIndex = 3;
inline bool Account::has_headindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Account::set_has_headindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Account::clear_has_headindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Account::clear_headindex() {
  headindex_ = 0;
  clear_has_headindex();
}
inline ::google::protobuf::int32 Account::headindex() const {
  // @@protoc_insertion_point(field_get:protocol.Account.headIndex)
  return headindex_;
}
inline void Account::set_headindex(::google::protobuf::int32 value) {
  set_has_headindex();
  headindex_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.headIndex)
}

inline const Account* Account::internal_default_instance() {
  return &Account_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Account_2eproto__INCLUDED
