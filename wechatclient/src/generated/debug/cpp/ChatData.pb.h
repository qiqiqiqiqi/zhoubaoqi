// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatData.proto

#ifndef PROTOBUF_ChatData_2eproto__INCLUDED
#define PROTOBUF_ChatData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ChatData_2eproto();
void protobuf_InitDefaults_ChatData_2eproto();
void protobuf_AssignDesc_ChatData_2eproto();
void protobuf_ShutdownFile_ChatData_2eproto();

class ChatItem;

enum ChatItem_ChatType {
  ChatItem_ChatType_TEXT = 0,
  ChatItem_ChatType_IMAGE = 1
};
bool ChatItem_ChatType_IsValid(int value);
const ChatItem_ChatType ChatItem_ChatType_ChatType_MIN = ChatItem_ChatType_TEXT;
const ChatItem_ChatType ChatItem_ChatType_ChatType_MAX = ChatItem_ChatType_IMAGE;
const int ChatItem_ChatType_ChatType_ARRAYSIZE = ChatItem_ChatType_ChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatItem_ChatType_descriptor();
inline const ::std::string& ChatItem_ChatType_Name(ChatItem_ChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatItem_ChatType_descriptor(), value);
}
inline bool ChatItem_ChatType_Parse(
    const ::std::string& name, ChatItem_ChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatItem_ChatType>(
    ChatItem_ChatType_descriptor(), name, value);
}
enum ChatItem_TargetType {
  ChatItem_TargetType_INDIVIDUAL = 0,
  ChatItem_TargetType_GROUP = 1,
  ChatItem_TargetType_SYSTEM = 2
};
bool ChatItem_TargetType_IsValid(int value);
const ChatItem_TargetType ChatItem_TargetType_TargetType_MIN = ChatItem_TargetType_INDIVIDUAL;
const ChatItem_TargetType ChatItem_TargetType_TargetType_MAX = ChatItem_TargetType_SYSTEM;
const int ChatItem_TargetType_TargetType_ARRAYSIZE = ChatItem_TargetType_TargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatItem_TargetType_descriptor();
inline const ::std::string& ChatItem_TargetType_Name(ChatItem_TargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatItem_TargetType_descriptor(), value);
}
inline bool ChatItem_TargetType_Parse(
    const ::std::string& name, ChatItem_TargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatItem_TargetType>(
    ChatItem_TargetType_descriptor(), name, value);
}
// ===================================================================

class ChatItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.ChatItem) */ {
 public:
  ChatItem();
  virtual ~ChatItem();

  ChatItem(const ChatItem& from);

  inline ChatItem& operator=(const ChatItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatItem& default_instance();

  static const ChatItem* internal_default_instance();

  void Swap(ChatItem* other);

  // implements Message ----------------------------------------------

  inline ChatItem* New() const { return New(NULL); }

  ChatItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatItem& from);
  void MergeFrom(const ChatItem& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatItem* other);
  void UnsafeMergeFrom(const ChatItem& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatItem_ChatType ChatType;
  static const ChatType TEXT =
    ChatItem_ChatType_TEXT;
  static const ChatType IMAGE =
    ChatItem_ChatType_IMAGE;
  static inline bool ChatType_IsValid(int value) {
    return ChatItem_ChatType_IsValid(value);
  }
  static const ChatType ChatType_MIN =
    ChatItem_ChatType_ChatType_MIN;
  static const ChatType ChatType_MAX =
    ChatItem_ChatType_ChatType_MAX;
  static const int ChatType_ARRAYSIZE =
    ChatItem_ChatType_ChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatType_descriptor() {
    return ChatItem_ChatType_descriptor();
  }
  static inline const ::std::string& ChatType_Name(ChatType value) {
    return ChatItem_ChatType_Name(value);
  }
  static inline bool ChatType_Parse(const ::std::string& name,
      ChatType* value) {
    return ChatItem_ChatType_Parse(name, value);
  }

  typedef ChatItem_TargetType TargetType;
  static const TargetType INDIVIDUAL =
    ChatItem_TargetType_INDIVIDUAL;
  static const TargetType GROUP =
    ChatItem_TargetType_GROUP;
  static const TargetType SYSTEM =
    ChatItem_TargetType_SYSTEM;
  static inline bool TargetType_IsValid(int value) {
    return ChatItem_TargetType_IsValid(value);
  }
  static const TargetType TargetType_MIN =
    ChatItem_TargetType_TargetType_MIN;
  static const TargetType TargetType_MAX =
    ChatItem_TargetType_TargetType_MAX;
  static const int TargetType_ARRAYSIZE =
    ChatItem_TargetType_TargetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TargetType_descriptor() {
    return ChatItem_TargetType_descriptor();
  }
  static inline const ::std::string& TargetType_Name(TargetType value) {
    return ChatItem_TargetType_Name(value);
  }
  static inline bool TargetType_Parse(const ::std::string& name,
      TargetType* value) {
    return ChatItem_TargetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .protocol.ChatItem.TargetType targetType = 1 [default = INDIVIDUAL];
  bool has_targettype() const;
  void clear_targettype();
  static const int kTargetTypeFieldNumber = 1;
  ::protocol::ChatItem_TargetType targettype() const;
  void set_targettype(::protocol::ChatItem_TargetType value);

  // optional string sendUserId = 2;
  bool has_senduserid() const;
  void clear_senduserid();
  static const int kSendUserIdFieldNumber = 2;
  const ::std::string& senduserid() const;
  void set_senduserid(const ::std::string& value);
  void set_senduserid(const char* value);
  void set_senduserid(const char* value, size_t size);
  ::std::string* mutable_senduserid();
  ::std::string* release_senduserid();
  void set_allocated_senduserid(::std::string* senduserid);

  // required string receiveUserId = 3;
  bool has_receiveuserid() const;
  void clear_receiveuserid();
  static const int kReceiveUserIdFieldNumber = 3;
  const ::std::string& receiveuserid() const;
  void set_receiveuserid(const ::std::string& value);
  void set_receiveuserid(const char* value);
  void set_receiveuserid(const char* value, size_t size);
  ::std::string* mutable_receiveuserid();
  ::std::string* release_receiveuserid();
  void set_allocated_receiveuserid(::std::string* receiveuserid);

  // required .protocol.ChatItem.ChatType chatType = 4;
  bool has_chattype() const;
  void clear_chattype();
  static const int kChatTypeFieldNumber = 4;
  ::protocol::ChatItem_ChatType chattype() const;
  void set_chattype(::protocol::ChatItem_ChatType value);

  // required string chatBody = 5;
  bool has_chatbody() const;
  void clear_chatbody();
  static const int kChatBodyFieldNumber = 5;
  const ::std::string& chatbody() const;
  void set_chatbody(const ::std::string& value);
  void set_chatbody(const char* value);
  void set_chatbody(const char* value, size_t size);
  ::std::string* mutable_chatbody();
  ::std::string* release_chatbody();
  void set_allocated_chatbody(::std::string* chatbody);

  // required string messageInfoID = 7;
  bool has_messageinfoid() const;
  void clear_messageinfoid();
  static const int kMessageInfoIDFieldNumber = 7;
  const ::std::string& messageinfoid() const;
  void set_messageinfoid(const ::std::string& value);
  void set_messageinfoid(const char* value);
  void set_messageinfoid(const char* value, size_t size);
  ::std::string* mutable_messageinfoid();
  ::std::string* release_messageinfoid();
  void set_allocated_messageinfoid(::std::string* messageinfoid);

  // optional int64 date = 6;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 6;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.ChatItem)
 private:
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_senduserid();
  inline void clear_has_senduserid();
  inline void set_has_receiveuserid();
  inline void clear_has_receiveuserid();
  inline void set_has_chattype();
  inline void clear_has_chattype();
  inline void set_has_chatbody();
  inline void clear_has_chatbody();
  inline void set_has_messageinfoid();
  inline void clear_has_messageinfoid();
  inline void set_has_date();
  inline void clear_has_date();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr senduserid_;
  ::google::protobuf::internal::ArenaStringPtr receiveuserid_;
  ::google::protobuf::internal::ArenaStringPtr chatbody_;
  ::google::protobuf::internal::ArenaStringPtr messageinfoid_;
  int targettype_;
  int chattype_;
  ::google::protobuf::int64 date_;
  friend void  protobuf_InitDefaults_ChatData_2eproto_impl();
  friend void  protobuf_AddDesc_ChatData_2eproto_impl();
  friend void protobuf_AssignDesc_ChatData_2eproto();
  friend void protobuf_ShutdownFile_ChatData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChatItem> ChatItem_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatItem

// optional .protocol.ChatItem.TargetType targetType = 1 [default = INDIVIDUAL];
inline bool ChatItem::has_targettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatItem::set_has_targettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatItem::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatItem::clear_targettype() {
  targettype_ = 0;
  clear_has_targettype();
}
inline ::protocol::ChatItem_TargetType ChatItem::targettype() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.targetType)
  return static_cast< ::protocol::ChatItem_TargetType >(targettype_);
}
inline void ChatItem::set_targettype(::protocol::ChatItem_TargetType value) {
  assert(::protocol::ChatItem_TargetType_IsValid(value));
  set_has_targettype();
  targettype_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChatItem.targetType)
}

// optional string sendUserId = 2;
inline bool ChatItem::has_senduserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatItem::set_has_senduserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatItem::clear_has_senduserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatItem::clear_senduserid() {
  senduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_senduserid();
}
inline const ::std::string& ChatItem::senduserid() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.sendUserId)
  return senduserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatItem::set_senduserid(const ::std::string& value) {
  set_has_senduserid();
  senduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChatItem.sendUserId)
}
inline void ChatItem::set_senduserid(const char* value) {
  set_has_senduserid();
  senduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChatItem.sendUserId)
}
inline void ChatItem::set_senduserid(const char* value, size_t size) {
  set_has_senduserid();
  senduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChatItem.sendUserId)
}
inline ::std::string* ChatItem::mutable_senduserid() {
  set_has_senduserid();
  // @@protoc_insertion_point(field_mutable:protocol.ChatItem.sendUserId)
  return senduserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatItem::release_senduserid() {
  // @@protoc_insertion_point(field_release:protocol.ChatItem.sendUserId)
  clear_has_senduserid();
  return senduserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatItem::set_allocated_senduserid(::std::string* senduserid) {
  if (senduserid != NULL) {
    set_has_senduserid();
  } else {
    clear_has_senduserid();
  }
  senduserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senduserid);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatItem.sendUserId)
}

// required string receiveUserId = 3;
inline bool ChatItem::has_receiveuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatItem::set_has_receiveuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatItem::clear_has_receiveuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatItem::clear_receiveuserid() {
  receiveuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_receiveuserid();
}
inline const ::std::string& ChatItem::receiveuserid() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.receiveUserId)
  return receiveuserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatItem::set_receiveuserid(const ::std::string& value) {
  set_has_receiveuserid();
  receiveuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChatItem.receiveUserId)
}
inline void ChatItem::set_receiveuserid(const char* value) {
  set_has_receiveuserid();
  receiveuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChatItem.receiveUserId)
}
inline void ChatItem::set_receiveuserid(const char* value, size_t size) {
  set_has_receiveuserid();
  receiveuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChatItem.receiveUserId)
}
inline ::std::string* ChatItem::mutable_receiveuserid() {
  set_has_receiveuserid();
  // @@protoc_insertion_point(field_mutable:protocol.ChatItem.receiveUserId)
  return receiveuserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatItem::release_receiveuserid() {
  // @@protoc_insertion_point(field_release:protocol.ChatItem.receiveUserId)
  clear_has_receiveuserid();
  return receiveuserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatItem::set_allocated_receiveuserid(::std::string* receiveuserid) {
  if (receiveuserid != NULL) {
    set_has_receiveuserid();
  } else {
    clear_has_receiveuserid();
  }
  receiveuserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiveuserid);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatItem.receiveUserId)
}

// required .protocol.ChatItem.ChatType chatType = 4;
inline bool ChatItem::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatItem::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatItem::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatItem::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
inline ::protocol::ChatItem_ChatType ChatItem::chattype() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.chatType)
  return static_cast< ::protocol::ChatItem_ChatType >(chattype_);
}
inline void ChatItem::set_chattype(::protocol::ChatItem_ChatType value) {
  assert(::protocol::ChatItem_ChatType_IsValid(value));
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChatItem.chatType)
}

// required string chatBody = 5;
inline bool ChatItem::has_chatbody() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatItem::set_has_chatbody() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatItem::clear_has_chatbody() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatItem::clear_chatbody() {
  chatbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatbody();
}
inline const ::std::string& ChatItem::chatbody() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.chatBody)
  return chatbody_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatItem::set_chatbody(const ::std::string& value) {
  set_has_chatbody();
  chatbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChatItem.chatBody)
}
inline void ChatItem::set_chatbody(const char* value) {
  set_has_chatbody();
  chatbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChatItem.chatBody)
}
inline void ChatItem::set_chatbody(const char* value, size_t size) {
  set_has_chatbody();
  chatbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChatItem.chatBody)
}
inline ::std::string* ChatItem::mutable_chatbody() {
  set_has_chatbody();
  // @@protoc_insertion_point(field_mutable:protocol.ChatItem.chatBody)
  return chatbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatItem::release_chatbody() {
  // @@protoc_insertion_point(field_release:protocol.ChatItem.chatBody)
  clear_has_chatbody();
  return chatbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatItem::set_allocated_chatbody(::std::string* chatbody) {
  if (chatbody != NULL) {
    set_has_chatbody();
  } else {
    clear_has_chatbody();
  }
  chatbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatbody);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatItem.chatBody)
}

// required string messageInfoID = 7;
inline bool ChatItem::has_messageinfoid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatItem::set_has_messageinfoid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatItem::clear_has_messageinfoid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatItem::clear_messageinfoid() {
  messageinfoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messageinfoid();
}
inline const ::std::string& ChatItem::messageinfoid() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.messageInfoID)
  return messageinfoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatItem::set_messageinfoid(const ::std::string& value) {
  set_has_messageinfoid();
  messageinfoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChatItem.messageInfoID)
}
inline void ChatItem::set_messageinfoid(const char* value) {
  set_has_messageinfoid();
  messageinfoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChatItem.messageInfoID)
}
inline void ChatItem::set_messageinfoid(const char* value, size_t size) {
  set_has_messageinfoid();
  messageinfoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChatItem.messageInfoID)
}
inline ::std::string* ChatItem::mutable_messageinfoid() {
  set_has_messageinfoid();
  // @@protoc_insertion_point(field_mutable:protocol.ChatItem.messageInfoID)
  return messageinfoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatItem::release_messageinfoid() {
  // @@protoc_insertion_point(field_release:protocol.ChatItem.messageInfoID)
  clear_has_messageinfoid();
  return messageinfoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatItem::set_allocated_messageinfoid(::std::string* messageinfoid) {
  if (messageinfoid != NULL) {
    set_has_messageinfoid();
  } else {
    clear_has_messageinfoid();
  }
  messageinfoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageinfoid);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatItem.messageInfoID)
}

// optional int64 date = 6;
inline bool ChatItem::has_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatItem::set_has_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatItem::clear_has_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatItem::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::int64 ChatItem::date() const {
  // @@protoc_insertion_point(field_get:protocol.ChatItem.date)
  return date_;
}
inline void ChatItem::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChatItem.date)
}

inline const ChatItem* ChatItem::internal_default_instance() {
  return &ChatItem_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::ChatItem_ChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::ChatItem_ChatType>() {
  return ::protocol::ChatItem_ChatType_descriptor();
}
template <> struct is_proto_enum< ::protocol::ChatItem_TargetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::ChatItem_TargetType>() {
  return ::protocol::ChatItem_TargetType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChatData_2eproto__INCLUDED
