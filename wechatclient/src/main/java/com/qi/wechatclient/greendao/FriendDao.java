package com.qi.wechatclient.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qi.wechatclient.bo.Friend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND".
*/
public class FriendDao extends AbstractDao<Friend, Void> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserID = new Property(0, String.class, "userID", false, "USER_ID");
        public final static Property FriendID = new Property(1, String.class, "friendID", false, "FRIEND_ID");
        public final static Property FriendName = new Property(2, String.class, "friendName", false, "FRIEND_NAME");
        public final static Property HeadPath = new Property(3, String.class, "headPath", false, "HEAD_PATH");
    }


    public FriendDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"USER_ID\" TEXT," + // 0: userID
                "\"FRIEND_ID\" TEXT UNIQUE ," + // 1: friendID
                "\"FRIEND_NAME\" TEXT," + // 2: friendName
                "\"HEAD_PATH\" TEXT);"); // 3: headPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(1, userID);
        }
 
        String friendID = entity.getFriendID();
        if (friendID != null) {
            stmt.bindString(2, friendID);
        }
 
        String friendName = entity.getFriendName();
        if (friendName != null) {
            stmt.bindString(3, friendName);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(4, headPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(1, userID);
        }
 
        String friendID = entity.getFriendID();
        if (friendID != null) {
            stmt.bindString(2, friendID);
        }
 
        String friendName = entity.getFriendName();
        if (friendName != null) {
            stmt.bindString(3, friendName);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(4, headPath);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
            cursor.isNull(offset) ? null : cursor.getString(offset), // userID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // friendID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // headPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setUserID(cursor.isNull(offset) ? null : cursor.getString(offset));
        entity.setFriendID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Friend entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Friend entity) {
        return null;
    }

    @Override
    public boolean hasKey(Friend entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
